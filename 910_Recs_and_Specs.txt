* UML 1.0 to 2.0
	* UML 1.0 is designed for humans, UML 2.0 is designed to
	enable sharing models between machines - Computer Aided
	Systems Engineering tools (~2.5 now)
		* Model driven architecture provides a ramework that
		allows for development of platform independent models
		* PIMs can be transformed into separate platform
		specific models ready for a particular system
		deployment (with details like an implementation
		language and communication protocols)
		* Still needs to be developed
	* UMl 2.0 uses a lot of the UML 1.0 original diagrams
	* Something about the class being a blueprint? 
	* He asked how many of us have a 3D printer...do people just
	own those?? I thought they were v expensive.
* Models and Diagrams
	* Remember that the set of diagrams is not a model of a
	system
	* UML modeling is not about diagrams
	* Diagrams constitute different views of your model
	capturing; just small parts of information about the model
* Common use of UML
	* In the words of Martin Fowler
		* UML is a sketch: capture the key points in a sketch
			* Something about inexperienced programmers using
			it as a sketch
			* Good for brainstorming/quick communication
		* UML is a blueprint: specifiy a detailed system with
		diagrams generated by the UML tool
			* Aerospace industy
			* Department of Defense
		* UML is a programming language: from a UML model to
		executable code, generate code for different
		environments from the same model
			* Something about building from scratch? Ya
			girl can't hear shit
* It depends on industry ** very important point **
	* For medical and defense, UML as a blueprint is the
	preffered way to achieve high quality
		* Can be slow and cumbersone
	* Other industries might prefer to use UML as a sketch
		* Tools might not be around when we need to modify the
		diagram
* Views of your model (by Philippe Kruchten 4+1 model)
	* Upper left box: logical view
		* An abstract description of the system's parts. Shows
		components and their interaction
		* Typical diagrams
			* class
			* object
			* state machine
			* interaction
		* What is the significance of having different objects
		out of the same class?
			* Different instances,
	* Upper right box: process view
		* Shows process inside of the system
	* Lower left box: physical view
	* Lower right box: development view
		* Presents an organization of parts, shows the used of
		modules and compontens. Typically package and
		component diagrams
	* In the middle oval: Use case view
		* Presents the functionality of the system using the
		outside view perspective
		* Describes what the system is supposed to do
		* Need to identify what is internal and external to
		the system
			* Not always easy
		* Typically deployment diagrams
		* We'll spend a lot of time talking about these
* Stereotypes
	* Stereotype signals special use or intent, can be applied
	to almost any element of UML notation
	* May have a special icon, like a stick-figure action symbol
	* If not, use <<Stereotype_Name>> (guillemots)
		* Those are not supposed to be less than/greater than
		signs even though they look exactly the same
* Use cases
	* Should have a priority and risk
	* Should help craft a test for the system at the end
	* When you have a requirement, how would you be confident
	that you met the requirement?
	* Use cases are ONLY supposed to depict what the use case is
	supposed to do
		* They do NOT have to depict what they're not supposed
		to do
* Languages of Use Cases
	* Shall vs Should
		* Shall = must
		* Should = desireable but not necessary
	* What can we use for an actors name in a use case?
		* Should this name be familiar to a developer or your
		customer?
			* External to the system so the dev doesn't need
			to be familiar, end user needs to be familiar
	* What about the system clock?
		* System clock can be thought of as an actor because
		you can't influence it
		* Same with auditors, installers, maintainers,
		upgraders, etc.
	* Is the "thing" an actual person interacting with the
	system?
		* Probs an actor
	* Is the thing something that can be changed within
	the systems design? 
		* If no, probs an actor
	* Rafal wans us to remember what's an actor 5 years from now
* Special kinds of actors
	* Some actors can be generalized and is shown with a 
	generalization arrow (solid arrow with unfilled head)
		* A general User is a generalized actor
		* A specialized administrator is a non
		generalized actor
* A good Use Case
	* Should be a requirement
	* Must have clear pass/fail criteria
	* Remove or refine vauge cases
	* What is not vague?
		* Something that can be evaluated by the user or
		fulfull a function for an external system
* Communication lines in use cases
	* They connect an actor/actors in a use case
	* No limit on how many actors one can have
	* If we were describing lines in english words, how many
	words would we have to use to describe it?
		* Six sentences, five or more words? That confuses me.
* Use cases in high-level format
	* Use case: buy items
	* Actors: customer, cashier
	* Type: primary
	* Description: A customer arrives at a checkout with items
	to purchase. The cashier records the purchase items and
	collects a payment. On completion, the customer leaves with
	the items
* The <<include>> relationship
	* Why bother with <<include>>?
		* Capture one piece of information in one place
		* The <<include>> relationship clearly shows that
		"check identity" is a part of the system that is used
		more than once
* What we need to know
	* Use case has to have pass or fail criteria
	* Use cases are important
	* We need to be able to identify the boundaries of the
	system